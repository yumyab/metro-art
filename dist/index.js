// Generated by index.ts

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
function fetchRandomImage() {
    return __awaiter(this, void 0, void 0, function () {
        var url, response, res, max, min, random, picked, url2, response2, res2, imgUrl, imageResponse, imageBlob, imageUrl, imgElement, anchorElement, titleElement, artistElement, date, dateElement, medium, mediumElement, dimensions, dimensionsElement, creditLine, creditLineElement, button;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    url = 'https://collectionapi.metmuseum.org/public/collection/v1/search?hasImages=true&medium=Paintings&departmentId=11&q=Painting';
                    return [4 /*yield*/, fetch(url)];
                case 1:
                    response = _a.sent();
                    return [4 /*yield*/, response.json()];
                case 2:
                    res = _a.sent();
                    max = res.total - 1;
                    min = 0;
                    random = Math.floor(Math.random() * (max - min + 1)) + min;
                    picked = res.objectIDs[random];
                    url2 = "https://collectionapi.metmuseum.org/public/collection/v1/objects/".concat(picked);
                    return [4 /*yield*/, fetch(url2)];
                case 3:
                    response2 = _a.sent();
                    return [4 /*yield*/, response2.json()];
                case 4:
                    res2 = _a.sent();
                    imgUrl = res2.primaryImageSmall;
                    return [4 /*yield*/, fetch(imgUrl)];
                case 5:
                    imageResponse = _a.sent();
                    return [4 /*yield*/, imageResponse.blob()];
                case 6:
                    imageBlob = _a.sent();
                    imageUrl = URL.createObjectURL(imageBlob);
                    imgElement = document.createElement('img');
                    imgElement.src = imageUrl;
                    // Add the image element to the document.
                    document.body.appendChild(imgElement);
                    anchorElement = document.createElement('a');
                    anchorElement.href = res2.objectURL;
                    anchorElement.textContent = 'View on Met Museum website';
                    // Add the link to the document.
                    document.body.appendChild(anchorElement);
                    titleElement = document.createElement('p');
                    titleElement.textContent = "Title: ".concat(res2.title);
                    document.body.appendChild(titleElement);
                    artistElement = document.createElement('p');
                    artistElement.textContent = "Artist: ".concat(res2.artistDisplayName);
                    document.body.appendChild(artistElement);
                    date = res2.objectDate;
                    dateElement = document.createElement('p');
                    dateElement.textContent = "Date: ".concat(date);
                    document.body.appendChild(dateElement);
                    medium = res2.medium;
                    mediumElement = document.createElement('p');
                    mediumElement.textContent = "Medium: ".concat(medium);
                    document.body.appendChild(mediumElement);
                    dimensions = res2.dimensions;
                    dimensionsElement = document.createElement('p');
                    dimensionsElement.textContent = "Dimensions: ".concat(dimensions);
                    document.body.appendChild(dimensionsElement);
                    creditLine = res2.creditLine;
                    creditLineElement = document.createElement('p');
                    creditLineElement.textContent = "Credit Line: ".concat(creditLine);
                    document.body.appendChild(creditLineElement);
                    button = document.createElement('button');
                    button.textContent = 'New Painting';
                    button.addEventListener('click', fetchRandomImage);
                    document.body.appendChild(button);
                    imgElement.onerror = function () {
                        // When the image fails to load, remove the elements from the page and call the `fetchRandomImage` function again to try again.
                        document.body.removeChild(imgElement);
                        document.body.removeChild(anchorElement);
                        document.body.removeChild(titleElement);
                        document.body.removeChild(artistElement);
                        document.body.removeChild(dateElement);
                        document.body.removeChild(mediumElement);
                        document.body.removeChild(dimensionsElement);
                        document.body.removeChild(creditLineElement);
                        document.body.removeChild(button);
                        fetchRandomImage();
                    };
                    return [2 /*return*/];
            }
        });
    });
}
// Call the function to fetch and display a random image.
fetchRandomImage();
